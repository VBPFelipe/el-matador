{"remainingRequest":"/home/vbpfelipe/Projetos/Treinos/VueJs/el-matador/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vbpfelipe/Projetos/Treinos/VueJs/el-matador/src/components/Buttons/Button.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vbpfelipe/Projetos/Treinos/VueJs/el-matador/src/components/Buttons/Button.vue","mtime":1570414869944},{"path":"/home/vbpfelipe/Projetos/Treinos/VueJs/el-matador/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vbpfelipe/Projetos/Treinos/VueJs/el-matador/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vbpfelipe/Projetos/Treinos/VueJs/el-matador/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vbpfelipe/Projetos/Treinos/VueJs/el-matador/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    export default {\n        name: 'app-button',\n        props: {\n            button_role: String,\n            type: {\n                type: String,\n                default: \"btn\"\n            }\n        },\n        computed: {\n            buttonClass(){\n                return `btn ${this.type}`\n            }\n        },\nmethods: {\n    attack(special) {\n    console.log(\"Alguma coisa\")\n    var atr = character_life.name[\"monster_life\"];\n\n    // this.hurt('monster_life', 5, 10, special,\n    //     'Player', 'Monster'\n    //     // , 'player'\n    // )\n    // if(this.monster_life > 0)\n    //     this.hurt('player_life', 7, 12, false,\n    //         'Monster', 'Player'\n    //         // , 'monster'\n    //     )\n    },\n    hurt(\n    atr,\n    min,\n    max,\n    special,\n    source,\n    target\n    // ,cls\n    ) {\n    const plus = special ? 5 : 0;\n    const hurt = this.get_random(min + plus, max + plus);\n    //this[prop] - acessa em this o nome da variável\n    this[atr] = Math.max(this[prop] - hurt, 0);\n    // this.register_log(\n    //     `${source} atingiu ${target} com ${hurt}.`, cls\n    // )\n    },\n    heal_and_hurt() {\n    this.heal(10, 15);\n    this.hurt(\n        \"player_life\",\n        7,\n        12,\n        false,\n        \"Monstro\",\n        \"Jogador\"\n        // , 'monster'\n    );\n    },\n    heal(min, max) {\n    const heal = this.get_random(min, max);\n    this.player_life = Math.min(this.player_life + heal, 100);\n    // this.register_log(\n    //     `Jogador ganhou força de ${heal}.`, 'player'\n    // )\n    }\n}\n    }\n",{"version":3,"sources":["Button.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Button.vue","sourceRoot":"src/components/Buttons","sourcesContent":["<template>\n    <div id=\"button\">\n        <!-- <button @click=\"attack(false)\" class=\"btn attack\"> -->\n        <button :class=\"buttonClass\">\n            {{ button_role }}\n        </button>\n    </div>\n</template>\n\n<script>\n    export default {\n        name: 'app-button',\n        props: {\n            button_role: String,\n            type: {\n                type: String,\n                default: \"btn\"\n            }\n        },\n        computed: {\n            buttonClass(){\n                return `btn ${this.type}`\n            }\n        },\nmethods: {\n    attack(special) {\n    console.log(\"Alguma coisa\")\n    var atr = character_life.name[\"monster_life\"];\n\n    // this.hurt('monster_life', 5, 10, special,\n    //     'Player', 'Monster'\n    //     // , 'player'\n    // )\n    // if(this.monster_life > 0)\n    //     this.hurt('player_life', 7, 12, false,\n    //         'Monster', 'Player'\n    //         // , 'monster'\n    //     )\n    },\n    hurt(\n    atr,\n    min,\n    max,\n    special,\n    source,\n    target\n    // ,cls\n    ) {\n    const plus = special ? 5 : 0;\n    const hurt = this.get_random(min + plus, max + plus);\n    //this[prop] - acessa em this o nome da variável\n    this[atr] = Math.max(this[prop] - hurt, 0);\n    // this.register_log(\n    //     `${source} atingiu ${target} com ${hurt}.`, cls\n    // )\n    },\n    heal_and_hurt() {\n    this.heal(10, 15);\n    this.hurt(\n        \"player_life\",\n        7,\n        12,\n        false,\n        \"Monstro\",\n        \"Jogador\"\n        // , 'monster'\n    );\n    },\n    heal(min, max) {\n    const heal = this.get_random(min, max);\n    this.player_life = Math.min(this.player_life + heal, 100);\n    // this.register_log(\n    //     `Jogador ganhou força de ${heal}.`, 'player'\n    // )\n    }\n}\n    }\n</script>\n\n<style>\n\n    .btn{\n        padding: 5px 10px;\n        margin: 0px 10px;\n        border-radius: 5px;\n        text-transform: uppercase;\n        font-size: 1.1rem;\n    }\n\n    .new-game{\n        background-color: #4253af;\n        color: #fff;\n    }\n\n    .attack{\n        background-color: #e51c23;\n        color: #fff;\n    }\n\n    .special-attack{\n        background-color: #ff9800;\n        color: #000;\n    }\n\n    .heal{\n        background-color: #259b24;\n        color: #fff;\n    }\n\n    .give-up{\n        background-color: #bbb;\n        color: #000;\n    }\n</style>"]}]}